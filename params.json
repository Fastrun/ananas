{"name":"Ananas","tagline":"A Key-Value Framework For Object Drive","body":"###Overview\r\n\r\nThis section describes basic Key Value Framework (KVF) concept and the overview, and the interface definition. Through KVF it defines unified data model, function, and parameters.\r\n\r\nThis Framework allows different Key Value Storage (KVS, also known as Key Value Store) regisgter and unregister, like Virtual File System (VFS) manages ext3, jfs, brtfs, etc.\r\n\r\nAnd this framework provides unified API for upper application to call, to avoid write multiple adapters for different KVS, like call adapter for different vendors KVSs.\r\n\r\n###Key Value Storage Introduction\r\n\r\nTraditional storage is based on SCSI architecture, clients uses Logical Block Address (LBA) to read and write data. Upon block provides more services, such as file system, data base, etc.\r\n\r\nAs an alternative, Key Value Storage (also known as Object storage system) proveide Key-Vaule pair operation. Applicatin store value by specify key name, and key name maybe a variable string, also value is a variable data buffer. Then application is easy to store data, need no complicated layout design based on linear block space, only focuses on key name policy design and how to store key (like use Distributed Hashb Table to store it) . Upon KVS, itâ€™s easy to build file, swift, hds, no-sql, even block service, shown as Figure_1.\r\n\r\nActually, 512 or 4096 byte based block device is a simple kind KVS, its key name is LBA and its value is 512 or 4096 data. Since its simplicity, application needs complicated layout design; and variable key value store is smarter, so application will be easy to store data on it. This is a kind of trade-off.\r\n\r\n![Figure_1 Key Value Storage Application Scenario](https://lh6.googleusercontent.com/-ATf3P86QJwk/VMN8d8siaBI/AAAAAAAAOpM/00JT_eESul4/w2240-h273-no/figure%2B1.jpg)\r\n\r\nBased on the redundancy, there are three kinds of KVS:\r\n\r\n#### Standalone KVS\r\nStandalone KVS specifies an application scenario where application client read and write date directly from one standalone device (such as single hard disk, single flash card, etc). Related products include Huawei UDS Smart Disk, HGST libzbc with KV, Seagate Kinetic and SanDisk Fusionio etc.\r\n\r\n#### Distributed KVS\r\nDistribute KVS specifies an application scenario where data has redundancy among servers and racks in one data center, like replica / erasure code. Related products include Ceph RADOS, mechcached, mongoDB, Huawei UDS SoD (Sea of Disks), etc.\r\n\r\n#### Multiple Data Center KVS\r\nMultiple Data Center KVS specifies an application scenario where data has redundancy among multiple data center, also has replica / erasure code feature. Related products include amazon S3, SWIFT, etc.\r\nThree kinds of KVS are connected, and CAN be mutual dependant. Like Multiple Data Center KVS may be based on Distributed KVS, and Distributed KVS may be based on Standalone KVS.\r\n\r\n### Key Value Framework (KVF) Data Model\r\n\r\nBased on Key Value Framework (KVF), different vendors can register its Key Value Library (KV-LIB) to manage it Key Value Storage (KVS). These KV-LIBs should follow KVF data model, KVS provides pools, and pool provides objects. And pool supports nesting design, which means one pool can be on top of another pool, Shown as Figure_2.\r\n\r\n![Figure_2 Key Value Framework Data Model](https://lh4.googleusercontent.com/-MdmZ6073Lmw/VMN_N0uxmCI/AAAAAAAAOpo/Y7Up3zOmIGs/w2198-h935-no/figure%2B2.jpg)\r\n\r\n### Key Value Framwork Architecture\r\n\r\nKey Value Framework (KVF) provides 2 layer interfaces: Lower Layer Manage (LLM) API and Upper Layer Access (ULA) API, shown as Figure_3.\r\n\r\n![Figure_3 Key Value Framework Architecture](https://lh3.googleusercontent.com/-2zhoaRdOOyE/VMN_N4CKUCI/AAAAAAAAOps/37g-f3fKaO0/w2240-h818-no/figure%2B3.jpg)\r\n\r\nLLM(Lower Level Manage) provides register and unregister functions, and has 3 kinds of API: Object, Pool, and KV-LIB(Key Value Libraray).\r\nULA(Upper Layer Access) provides unified key value interface, then it makes application program simple and compatible.\r\nAlso some applications may provide key value service by leveraging ULA interface based on other KVS, and then it can be re-registered into key value framework, this make nesting design easily.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}